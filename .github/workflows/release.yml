name: Release Quarto Extension

on:
  workflow_call:
    inputs:
      version:
        description: "Version"
        required: true
        default: "patch"
        type: string
      formats:
        description: "Output formats (space-separated list)"
        required: true
        default: "html"
        type: string
      quarto:
        description: "Quarto version"
        required: true
        default: "release"
        type: string
      tinytex:
        description: "Install TinyTeX"
        required: true
        default: false
        type: boolean

env:
  GH_TOKEN: ${{ secrets.github_token }} # gh cli
  BRANCH: ci/bump-version
  COMMIT: "ci: bump version for release :rocket:"
  BUMPVERSION: ${{ inputs.version }}
  FORMATS: ${{ inputs.formats }}
  QUARTOVERSION: ${{ inputs.quarto }}
  TINYTEX: ${{ inputs.tinytex }}

permissions:
  contents: write
  pull-requests: write
  id-token: write
  pages: write

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Bump Version
        id: bump-version          
        shell: bash
        run: |
          git config --local user.name github-actions[bot]
          git config --local user.email 41898282+github-actions[bot]@users.noreply.github.com
          if git show-ref --quiet refs/heads/${BRANCH}; then
            echo "Branch ${BRANCH} already exists."
            git branch -D "${BRANCH}"
            git push origin --delete "${BRANCH}"
          fi
          git checkout -b "${BRANCH}"

          REPO="${{ github.repository }}"
          PREFIX="${{ github.repository_owner }}/quarto-"
          EXTENSION="${REPO#${PREFIX}}"
          MANIFEST="_extensions/${EXTENSION}/_extension.yml"
          echo "::notice ::Manifest: ${MANIFEST}"
          DATE=$(date +%Y-%m-%d)
          CURRENT_VERSION=$(grep "^version:" "${MANIFEST}" | sed 's/version: //;s/"//g')
          echo "::notice ::Current Version: ${CURRENT_VERSION}"
          MAJOR=$(echo ${CURRENT_VERSION} | cut -d. -f1)
          MINOR=$(echo ${CURRENT_VERSION} | cut -d. -f2)
          PATCH=$(echo ${CURRENT_VERSION} | cut -d. -f3)
          echo "::notice ::Bumping Version: ${BUMPVERSION}"
          case "${BUMPVERSION}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            *)
              PATCH=$((PATCH + 1))
              ;;
          esac

          VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "::notice ::New Version: ${VERSION}"
          sed -i "s/^version:.*/version: ${VERSION}/" "${MANIFEST}"
          sed -i "s/^version:.*/version: ${VERSION}/" CITATION.cff
          sed -i "s/^date-released:.*/date-released: \"${DATE}\"/" CITATION.cff
          git add CITATION.cff || echo "No changes to add"
          git add "${MANIFEST}" || echo "No changes to add"
          git commit -m "${COMMIT}" || echo "No changes to commit"
          git push --force origin ${BRANCH} || echo "No changes to push"

      - name: Create Pull Request
        shell: bash
        run: |
          sleep 20
          gh pr create --fill-first --base "main" --head "${BRANCH}" --label "Type: CI/CD :robot:"

      - name: Merge Pull Request
        shell: bash
        run: |
          sleep 20
          gh pr merge --auto --squash --delete-branch
          sleep 10

  deploy:
    runs-on: ubuntu-latest

    needs: bump-version

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update branch
        run: |
          git fetch --all
          git checkout main
          git pull origin main

      - name: Check inputs
        shell: bash
        run: |
          echo "::notice ::Quarto: ${QUARTOVERSION}"
          echo "::notice ::TinyTeX: ${TINYTEX}"
          echo "::notice ::Formats: ${FORMATS}"

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: "${{ env.QUARTOVERSION }}"
          tinytex: "${{ env.TINYTEX }}"

      - name: Render Quarto Project
        shell: bash
        run: |
          echo -e "project:\n  output-dir: _site" > _quarto.yml
          # Render to all formats via for loop to avoid LaTeX error "pdf/beamer" formats
          for format in ${FORMATS}; do
            quarto render --to ${format}
          done

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  release:
    runs-on: ubuntu-latest

    needs: deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update branch
        run: |
          git fetch --all
          git checkout main
          git pull origin main

      - name: Release extension on GitHub
        shell: bash
        run: |
          REPO="${{ github.repository }}"
          EXTENSION="${REPO#${{ github.repository_owner }}/quarto-}"
          MANIFEST="_extensions/${EXTENSION}/_extension.yml"
          VERSION=$(grep "^version:" "${MANIFEST}" | sed 's/version: //;s/"//g')
          LINE=$(grep -n "^version:" "${MANIFEST}" | cut -d: -f1)
          echo "::notice file=${MANIFEST},line=${LINE}::Version: ${VERSION}"
          PRTITLE=${EXTENSION^^}
          PRTITLE=${PRTITLE//-/ }
          gh release create ${VERSION} --title "${PRTITLE} ${VERSION}" --generate-notes
